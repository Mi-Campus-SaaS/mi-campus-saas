name: Jira bulk create tickets

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Print issues without creating"
        type: boolean
        default: false

jobs:
  matrix:
    name: Build issues matrix
    runs-on: ubuntu-latest
    outputs:
      issues: ${{ steps.build.outputs.issues }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read issues.json
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'tools/jira/issues.json';
            const raw = fs.readFileSync(path, 'utf8');
            const issues = JSON.parse(raw);
            core.setOutput('issues', JSON.stringify(issues));

  create:
    name: Create Jira issues
    needs: matrix
    runs-on: ubuntu-latest
    if: ${{ needs.matrix.outputs.issues != '' }}
    strategy:
      fail-fast: false
      matrix:
        issue: ${{ fromJSON(needs.matrix.outputs.issues) }}
    steps:
      - name: Dry run echo
        if: ${{ inputs.dry_run }}
        run: |
          echo "[DRY RUN] Would create:"
          echo "Project: ${{ secrets.JIRA_PROJECT_KEY }}"
          echo "Summary: ${{ matrix.issue.summary }}"
          echo "Type: ${{ matrix.issue.issueType }}"
          echo "Priority: ${{ matrix.issue.priority }}"
          echo "Labels: ${{ toJSON(matrix.issue.labels) }}"
      - name: Jira login
        if: ${{ !inputs.dry_run }}
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      - name: Create issue
        if: ${{ !inputs.dry_run }}
        uses: atlassian/gajira-create@v3
        with:
          project: ${{ secrets.JIRA_PROJECT_KEY }}
          summary: ${{ matrix.issue.summary }}
          description: ${{ matrix.issue.description }}
          issuetype: ${{ matrix.issue.issueType }}
          fields: |
            {
              "labels": ${{ toJSON(matrix.issue.labels) }},
              "priority": { "name": "${{ matrix.issue.priority }}" }
            }

