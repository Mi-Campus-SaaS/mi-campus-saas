name: CI
on: [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  security-scan:
    name: Security Scan (Gitleaks + Yarn Audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run Gitleaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          fail-on: true
          format: sarif
          output-file: gitleaks-report.sarif
      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gitleaks-report.sarif
      - name: Run Yarn Audit (Dependency Scanning)
        run: yarn audit --level high --json > yarn-audit-report.json || true
      - name: Check for High/Critical Vulnerabilities
        run: |
          if [ -s yarn-audit-report.json ]; then
            echo "Checking for high/critical vulnerabilities..."
            HIGH_CRITICAL=$(jq -r '.advisories | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | .key' yarn-audit-report.json | sort -u)
            if [ -n "$HIGH_CRITICAL" ]; then
              echo "Found high/critical vulnerabilities:"
              echo "$HIGH_CRITICAL"
              echo "Please review yarn-audit-exemptions.json for allowed exemptions"
              exit 1
            fi
          fi
        shell: bash

  lint:
    name: Lint (FE + BE)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run lint
        run: yarn lint

  test-backend:
    name: Test Backend (Jest)
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: micampus
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d micampus"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run backend unit tests
        env:
          NODE_ENV: test
          DB_TYPE: postgres
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: micampus
        run: yarn --cwd apps/backend test --ci --runInBand

  typecheck-frontend:
    name: Typecheck Frontend (TS)
    runs-on: ubuntu-latest
    needs: [security-scan, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Type check
        run: yarn --cwd apps/frontend run tsc -b --pretty false

  e2e:
    name: Playwright Tests (E2E + Visual)
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test-backend, typecheck-frontend]
    timeout-minutes: 30
    env:
      # Backend configuration
      PORT: 8080
      JWT_SECRET: your-super-secret-jwt-key-at-least-32-characters-long-for-testing
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-at-least-32-characters-long-for-testing
      DATABASE_PATH: ./data/dev.sqlite
      UPLOAD_DIR: uploads
      OTEL_ENABLED: false
      CORS_ALLOWLIST: http://localhost:5173,http://localhost:8080
      # Frontend configuration
      VITE_API_URL: http://localhost:8080/api
      VITE_OTEL_ENDPOINT: http://localhost:4318/v1/traces
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Seed database
        run: yarn --cwd apps/backend seed:dev
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Start backend server
        run: |
          cd apps/backend
          yarn start:dev &
          sleep 10
          curl -f http://localhost:8080/api/health || exit 1
      - name: Start frontend server
        run: |
          cd apps/frontend
          yarn dev &
          sleep 10
          curl -f http://localhost:5173 || exit 1
      - name: Run functional Playwright tests
        run: yarn test:e2e tests/e2e/happy-path.spec.ts
      - name: Run visual regression tests
        run: yarn test:visual
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore
      - name: Upload screenshot diffs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diffs
          path: test-results
          if-no-files-found: ignore

  budgets:
    name: Budgets (Bundle + Perf)
    runs-on: ubuntu-latest
    needs: [security-scan, lint, typecheck-frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Enable Corepack
        run: corepack enable
      - name: Use Yarn 1.x (classic)
        run: corepack prepare yarn@1.22.22 --activate
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run bundle budgets
        run: yarn budgets:bundle
      - name: Run performance budgets
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'false'
          CHROME_PATH: $(node -e "console.log(require('puppeteer').executablePath())")
        run: yarn budgets:perf


